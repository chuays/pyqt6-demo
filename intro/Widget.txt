QWidget是所有用户界面对象的基类，它从窗口系统中接收鼠标、键盘和其他事件，并在屏幕上绘制自己。未嵌入到父窗口的小部件称为窗口，否则称之为控件。通常窗口包含边框和标题栏，当然也可用设置窗口标志（window flags）去掉窗口的边框和标题栏。在Qt中，QMainWindow和QDialog的各种子类是最常见的窗口类型。

1.窗口和控件
没有父窗口的小部件通常是独立窗口（顶层小部件），对于窗口，可以用setWindowTitle()和setWindowIcon()来设置标题栏的标题和图标。
有父窗口的小部件称为控件，它们通常内嵌到父窗口中。Qt中大多数小部件都是当控件使用的，比如，尽管标签（QLabel）可以显示为一个窗口，但一般不这么用，通常把它作为窗口的一个控件，就像前面的HelloWorld项目那样。

2.事件
小部件会响应用户操作产生的各种事件。Qt通过QEvent子类实例调用特定的事件处理函数（QEvent子类中包含每个事件的详细信息），将事件传递到小部件。
●最常用的事件处理函数
paintEvent()：小部件重绘时被调用。如果要显示自定义内容，必须实现它。使用QPainter绘制只能在paintEvent()或paintEvent()调用的函数中进行。
resizeEvent()：小部件大小变化时被调用
mousePressEvent()：通常在两种情况下被调用。一是鼠标指针在小部件内，并点击了鼠标按键；二是小部件通过grabMouse()函数把鼠标抢占了。按下鼠标不放和调用grabMouse()的效果是一样的。
mouseReleaseEvent()：当鼠标按键释放时被调用。小部件只有在接收了相应的鼠标按下事件，才会接收鼠标释放事件，这两事件是一一对应的关系。有一个例外，如果在按住鼠标的同时弹出菜单，则此弹出菜单会立即偷走鼠标事件（进入菜单的事件循环中）。
mouseDoubleClickEvent()：在小部件中双击会被调用。双击实际上是当做两次单击处理的，如果双击的时候手抖了，可能还会收到鼠标移动事件。需要注意的是，在第二次点击到达之前，是无法区分单击和双击的，所以不要试图在双击事件里处理单击逻辑。
●如果要接受键盘输入，需要多实现几个事件处理函数
keyPressEvent()：当键盘按键按下是被调用。长按会重复调用。
focusInEvent()：当小部件获取键盘焦点时被调用。
focusOutEvent()：当小部件失去键盘焦点时被调用。
●不那么常用的事处理函数
mouseMoveEvent()：当鼠标按键按下且移动鼠标时被调用。这在拖拽时非常有用。如果调用了setMouseTracking(true)，不用按下鼠标也能也能触发这个事件啦。
keyReleaseEvent()：在键盘按键释放时被调用。
wheelEvent()：当焦点在小部件上，滚动鼠标滚轮时被调用。
enterEvent()：当鼠标移动到小部件时被调用。但不包括其中的子部件，比如窗口中有个按钮，鼠标移动到按钮上并不会触发窗口的enterEvent。
leaveEvent()：当鼠标移动到小部件时被调用。同理，鼠标离开了子部件，不会触发父部件的leaveEvent。
moveEvent()：当小部件在父窗口中移动时被调用。
closeEvent()：当小部件关闭时被调用。
